'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _cmd = require('./cmd');

var _cmd2 = _interopRequireDefault(_cmd);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

var promise = function promise(promiseFactory) {
  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    args[_key - 1] = arguments[_key];
  }

  console.warn('Effects.promise is deprecated. Please\n    use Cmd.run (https://github.com/redux-loop/redux-loop/blob/master/docs/ApiDocs.md#cmdrunfunc-options).\n    Effects.promise will be removed in the next major version.');
  if (process.env.NODE_ENV !== 'production') {
    (0, _utils.throwInvariant)(typeof promiseFactory === 'function', 'Effects.promise: first argument to Effects.promise must be a function that returns a promise');
  }

  return _cmd2['default'].run(promiseFactory, {
    successActionCreator: function successActionCreator(action) {
      return action;
    },
    failActionCreator: function failActionCreator(action) {
      return action;
    },
    args: args
  });
};

var call = function call(resultFactory) {
  for (var _len2 = arguments.length, args = Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
    args[_key2 - 1] = arguments[_key2];
  }

  console.warn('Effects.call is deprecated. Please\n    use Cmd.run (https://github.com/redux-loop/redux-loop/blob/master/docs/ApiDocs.md#cmdrunfunc-options).\n    Effects.call will be removed in the next major version.');
  if (process.env.NODE_ENV !== 'production') {
    (0, _utils.throwInvariant)(typeof resultFactory === 'function', 'Effects.call: first argument to Effects.call must be a function');
  }

  return _cmd2['default'].run(resultFactory, {
    successActionCreator: function successActionCreator(action) {
      return action;
    },
    args: args
  });
};

var constant = function constant(actionToDispatch) {
  console.warn('Effects.constant is deprecated and has been renamed Cmd.action. \n    Effects.constant will be removed in the next major version.');
  if (process.env.NODE_ENV !== 'production') {
    (0, _utils.throwInvariant)((typeof actionToDispatch === 'undefined' ? 'undefined' : _typeof(actionToDispatch)) === 'object' && actionToDispatch !== null && typeof actionToDispatch.type !== 'undefined', 'Effects.constant: first argument and only argument to Cmd.constant must be an action');
  }
  return _cmd2['default'].action(actionToDispatch);
};

var batch = function batch(cmds) {
  console.warn('Effects.batch is deprecated and has been renamed Cmd.batch. \n    Effects.batch will be removed in the next major version.');
  if (process.env.NODE_ENV !== 'production') {
    (0, _utils.throwInvariant)(Array.isArray(cmds) && cmds.every(isCmd), 'Effects.batch: first and only argument to Effects.batch must be an array of other Cmds/Effects');
  }

  return _cmd2['default'].batch(cmds);
};

var lift = function lift(nestedCmd, tagger, args) {
  console.warn('Effects.lift is deprecated and has been renamed Cmd.map. \n    Effects.lift will be removed in the next major version.');
  if (process.env.NODE_ENV !== 'production') {
    (0, _utils.throwInvariant)(isCmd(nestedCmd), 'Effects.lift: first argument to Effects.lift must be another Cmd');

    (0, _utils.throwInvariant)(typeof tagger === 'function', 'Effects.lift: second argument to Effects.lift must be a function that returns an action');
  }

  return _cmd2['default'].map.apply(_cmd2['default'], [nestedCmd, tagger].concat(_toConsumableArray(args)));
};

var none = _extends({}, _cmd2['default'].none, { isEffect: true });

exports['default'] = {
  promise: promise,
  call: call,
  constant: constant,
  batch: batch,
  lift: lift,
  none: none
};